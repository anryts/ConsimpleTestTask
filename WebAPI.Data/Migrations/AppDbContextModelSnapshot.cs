// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebAPI.Data;

#nullable disable

namespace WebAPI.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebAPI.Data.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_registration");

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("initials");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.ToTable("clients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a541e8e0-ea1a-41da-bbb4-3bd61e17423f"),
                            DateOfBirth = new DateTime(1989, 12, 31, 22, 0, 0, 0, DateTimeKind.Utc),
                            DateOfRegistration = new DateTime(2020, 5, 9, 21, 0, 0, 0, DateTimeKind.Utc),
                            Initials = "Client1"
                        },
                        new
                        {
                            Id = new Guid("6cd9ae1b-7f8a-4881-86dc-9ac94e5d658d"),
                            DateOfBirth = new DateTime(1991, 2, 1, 22, 0, 0, 0, DateTimeKind.Utc),
                            DateOfRegistration = new DateTime(2021, 6, 10, 21, 0, 0, 0, DateTimeKind.Utc),
                            Initials = "Client2"
                        },
                        new
                        {
                            Id = new Guid("4de9648f-488d-4534-8691-a5c3d93e6a62"),
                            DateOfBirth = new DateTime(1985, 3, 14, 22, 0, 0, 0, DateTimeKind.Utc),
                            DateOfRegistration = new DateTime(2019, 7, 19, 21, 0, 0, 0, DateTimeKind.Utc),
                            Initials = "Client3"
                        },
                        new
                        {
                            Id = new Guid("0ddcc0d3-8d4c-4af1-bcba-12baa06b0af8"),
                            DateOfBirth = new DateTime(1988, 4, 19, 21, 0, 0, 0, DateTimeKind.Utc),
                            DateOfRegistration = new DateTime(2018, 8, 24, 21, 0, 0, 0, DateTimeKind.Utc),
                            Initials = "Client4"
                        });
                });

            modelBuilder.Entity("WebAPI.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Article")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("article");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("Article")
                        .HasName("pk_product");

                    b.ToTable("product", (string)null);

                    b.HasData(
                        new
                        {
                            Article = new Guid("a57cb32f-6cac-43b1-ba46-3e7ee4ddda56"),
                            Category = "Electronics",
                            Name = "Product1",
                            Price = 29.99m
                        },
                        new
                        {
                            Article = new Guid("31513b63-bb6b-47c1-9c15-19830871ceb5"),
                            Category = "Food",
                            Name = "Product2",
                            Price = 39.99m
                        },
                        new
                        {
                            Article = new Guid("7b2bafcf-8ba4-4398-a5a2-0cf61f3d69a4"),
                            Category = "Clothes",
                            Name = "Product3",
                            Price = 49.99m
                        },
                        new
                        {
                            Article = new Guid("a0c2d632-3711-47a7-9466-3f2941602afc"),
                            Category = "Other",
                            Name = "Product4",
                            Price = 59.99m
                        });
                });

            modelBuilder.Entity("WebAPI.Data.Models.ProductPurchase", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid>("PurchaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("purchase_id");

                    b.HasKey("ProductId", "PurchaseId")
                        .HasName("pk_product_purchase");

                    b.HasIndex("PurchaseId")
                        .HasDatabaseName("ix_product_purchase_purchase_id");

                    b.ToTable("product_purchase", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("a57cb32f-6cac-43b1-ba46-3e7ee4ddda56"),
                            PurchaseId = new Guid("fa0c1087-a04b-470d-b703-818006158472")
                        },
                        new
                        {
                            ProductId = new Guid("31513b63-bb6b-47c1-9c15-19830871ceb5"),
                            PurchaseId = new Guid("0a67c57e-4e00-4ab8-9251-1e79368078a3")
                        },
                        new
                        {
                            ProductId = new Guid("7b2bafcf-8ba4-4398-a5a2-0cf61f3d69a4"),
                            PurchaseId = new Guid("dc0e5e30-f760-4c07-83ac-d221b20c9960")
                        },
                        new
                        {
                            ProductId = new Guid("a0c2d632-3711-47a7-9466-3f2941602afc"),
                            PurchaseId = new Guid("00ed4d9a-8e29-434c-b454-6b04dbb5061f")
                        });
                });

            modelBuilder.Entity("WebAPI.Data.Models.Purchase", b =>
                {
                    b.Property<Guid>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("number");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("numeric")
                        .HasColumnName("total_value");

                    b.HasKey("Number")
                        .HasName("pk_purchases");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_purchases_client_id");

                    b.ToTable("purchases", (string)null);

                    b.HasData(
                        new
                        {
                            Number = new Guid("fa0c1087-a04b-470d-b703-818006158472"),
                            ClientId = new Guid("a541e8e0-ea1a-41da-bbb4-3bd61e17423f"),
                            Date = new DateTime(2023, 9, 21, 15, 2, 45, 677, DateTimeKind.Utc).AddTicks(7298),
                            TotalValue = 29.99m
                        },
                        new
                        {
                            Number = new Guid("0a67c57e-4e00-4ab8-9251-1e79368078a3"),
                            ClientId = new Guid("6cd9ae1b-7f8a-4881-86dc-9ac94e5d658d"),
                            Date = new DateTime(2023, 9, 21, 15, 2, 45, 677, DateTimeKind.Utc).AddTicks(7744),
                            TotalValue = 39.99m
                        },
                        new
                        {
                            Number = new Guid("dc0e5e30-f760-4c07-83ac-d221b20c9960"),
                            ClientId = new Guid("4de9648f-488d-4534-8691-a5c3d93e6a62"),
                            Date = new DateTime(2023, 9, 21, 15, 2, 45, 677, DateTimeKind.Utc).AddTicks(7746),
                            TotalValue = 49.99m
                        },
                        new
                        {
                            Number = new Guid("00ed4d9a-8e29-434c-b454-6b04dbb5061f"),
                            ClientId = new Guid("0ddcc0d3-8d4c-4af1-bcba-12baa06b0af8"),
                            Date = new DateTime(2023, 9, 21, 15, 2, 45, 677, DateTimeKind.Utc).AddTicks(7748),
                            TotalValue = 59.99m
                        });
                });

            modelBuilder.Entity("WebAPI.Data.Models.ProductPurchase", b =>
                {
                    b.HasOne("WebAPI.Data.Models.Product", "Product")
                        .WithMany("ProductPurchases")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_purchase_product_product_temp_id");

                    b.HasOne("WebAPI.Data.Models.Purchase", "Purchase")
                        .WithMany("Products")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_purchase_purchases_purchase_temp_id");

                    b.Navigation("Product");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("WebAPI.Data.Models.Purchase", b =>
                {
                    b.HasOne("WebAPI.Data.Models.Client", "Client")
                        .WithMany("Purchases")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchases_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("WebAPI.Data.Models.Client", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("WebAPI.Data.Models.Product", b =>
                {
                    b.Navigation("ProductPurchases");
                });

            modelBuilder.Entity("WebAPI.Data.Models.Purchase", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
